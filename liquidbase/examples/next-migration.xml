<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-2.0.xsd
    http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd">
    
  <preConditions>
      <dbms type="oracle" />
  </preConditions>
     
  <changeSet author="mikerud" id="21082014-1">
    <sql>
      CREATE TABLE LETTER
      (
      ID NUMBER(28) NOT NULL,
      LETTER_NAME VARCHAR2(256),
	  LETTER_FULLNAME VARCHAR2(4000),
      LETTER_REG_DATE DATE,
	  LETTER_START_DATE DATE,
      LETTER_END_DATE DATE,
      LETTER_ORG_IN NUMBER(28),
      LETTER_ORG_OUT NUMBER(28),
      LETTER_TYPE_ID NUMBER(28),
      LETTER_STATUS_ID NUMBER(28),
      TITLE_ID NUMBER(28),
	  ENTITY_ID NUMBER(28),
	  CREATE_DATE DATE,
	  DELETE_DATE DATE,
	  CREATOR NUMBER(28)
      );
    </sql>
  </changeSet>
  
  <changeSet author="mikerud" id="21082014-2">
    <sql>
      ALTER TABLE LETTER ADD CONSTRAINT LETTER_PK PRIMARY KEY (ID);
    </sql>
  </changeSet>
  
  <changeSet author="mikerud" id="21082014-3">
    <sql>
      CREATE TABLE TITLE_LETTER
      (
      ID NUMBER(28) NOT NULL,
      TITLE_ID NUMBER(28),
	  LETTER_ID NUMBER(28),
	  ENTITY_ID NUMBER(28),
	  CREATE_DATE DATE,
	  DELETE_DATE DATE,
	  CREATOR NUMBER(28)
      );
    </sql>
  </changeSet>  
  
  <changeSet author="mikerud" id="21082014-4">
    <sql>
      ALTER TABLE TITLE_LETTER ADD CONSTRAINT TITLE_LETTER_PK PRIMARY KEY (ID);
	  ALTER TABLE TITLE_LETTER ADD CONSTRAINT TITLE_LETTER_TITLE_FK FOREIGN KEY ( TITLE_ID ) REFERENCES TITLE ( ID ) ON DELETE CASCADE;
	  ALTER TABLE TITLE_LETTER ADD CONSTRAINT TITLE_LETTER_LATTER_FK FOREIGN KEY ( LETTER_ID ) REFERENCES LETTER ( ID ) ON DELETE CASCADE;
    </sql>
  </changeSet>

  <changeSet author="mikerud" id="21082014-5">
    <sql>
      CREATE TABLE TITLE_DOCUMENT
      (
      ID NUMBER(28) NOT NULL,
      TITLE_ID NUMBER(28),
	  DOCUMENT_ID NUMBER(28),
	  ENTITY_ID NUMBER(28),
	  CREATE_DATE DATE,
	  DELETE_DATE DATE,
	  CREATOR NUMBER(28)
      );
    </sql>
  </changeSet>
  
  <changeSet author="mikerud" id="21082014-6">
    <sql>
      ALTER TABLE TITLE_DOCUMENT ADD CONSTRAINT TITLE_DOCUMENT_PK PRIMARY KEY (ID);
	  ALTER TABLE TITLE_DOCUMENT ADD CONSTRAINT TITLE_DOCUMENT_TITLE_FK FOREIGN KEY ( TITLE_ID ) REFERENCES TITLE ( ID ) ON DELETE CASCADE;
	  ALTER TABLE TITLE_DOCUMENT ADD CONSTRAINT TITLE_DOCUMENT_DOCUMENT_FK FOREIGN KEY ( DOCUMENT_ID ) REFERENCES DOCUMENT ( ID ) ON DELETE CASCADE;
    </sql>
  </changeSet>  

  <changeSet author="mikerud" id="21082014-7">
    <sql>
      CREATE TABLE TITLE_CONTRACT
      (
      ID NUMBER(28) NOT NULL,
      TITLE_ID NUMBER(28),
	  CONTRACT_ID NUMBER(28),
	  ENTITY_ID NUMBER(28),
	  CREATE_DATE DATE,
	  DELETE_DATE DATE,
	  CREATOR NUMBER(28)
      );
    </sql>
  </changeSet>

  <changeSet author="mikerud" id="21082014-8">
    <sql>
      ALTER TABLE TITLE_CONTRACT ADD CONSTRAINT TITLE_CONTRACT_PK PRIMARY KEY (ID);
	  ALTER TABLE TITLE_CONTRACT ADD CONSTRAINT TITLE_CONTRACT_TITLE_FK FOREIGN KEY ( TITLE_ID ) REFERENCES TITLE ( ID ) ON DELETE CASCADE;
	  ALTER TABLE TITLE_CONTRACT ADD CONSTRAINT TITLE_CONTRACT_CONTRACT_FK FOREIGN KEY ( CONTRACT_ID ) REFERENCES CONTRACT ( ID ) ON DELETE CASCADE;
    </sql>
  </changeSet>
  
  <changeSet author="mikerud" id="22082014-1">
    <sql>
	  ALTER TABLE TITLE DROP CONSTRAINT TITLE_STATUS_FK;
      ALTER TABLE TITLE ADD CONSTRAINT TITLE_TITLE_STATUS_FK FOREIGN KEY ( TITLE_STATUS_ID ) REFERENCES TITLE_STATUS ( ID ) ON DELETE SET NULL;
      </sql>
  </changeSet>
  
  <changeSet author="mikerud" id="22082014-2">
    <sql>
	  ALTER TABLE TITLE DROP CONSTRAINT TITLE_TITLE_TYPE_FK;
      ALTER TABLE TITLE ADD CONSTRAINT TITLE_TITLE_TYPE_FK FOREIGN KEY ( TITLE_TYPE_ID ) REFERENCES TITLE_TYPE ( ID ) ON DELETE SET NULL;
      </sql>
  </changeSet>
  
  <changeSet author="mikerud" id="27082014-1">
    <sql>
      CREATE TABLE LETTER_STATUS
      (
      ID NUMBER(28) NOT NULL,
      NAME VARCHAR2(256),
	  ENTITY_ID NUMBER(28),
	  CREATE_DATE DATE,
	  DELETE_DATE DATE,
	  CREATOR NUMBER(28)
      );
    </sql>
  </changeSet>

  <changeSet author="mikerud" id="27082014-2">
    <sql>
      ALTER TABLE LETTER_STATUS ADD CONSTRAINT LETTER_STATUS_PK PRIMARY KEY (ID);
    </sql>
  </changeSet>
  
  <changeSet author="mikerud" id="27082014-3">
    <sql>
	  ALTER TABLE LETTER ADD CONSTRAINT LETTER_LETTER_STATUS_FK FOREIGN KEY ( LETTER_STATUS_ID ) REFERENCES LETTER_STATUS ( ID ) ON DELETE SET NULL;
    </sql>
  </changeSet>
  
  <changeSet author="mikerud" id="28082014-1">
    <sql>
	  ALTER TABLE CONTRACT MODIFY LOT_KBK VARCHAR2(128);
    </sql>
  </changeSet>

  <changeSet author="mikerud" id="28082014-2">
    <sql>
CREATE SEQUENCE SEQ_KBK START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_USER START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_ROLE START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_GROUP START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_USER_GROUP START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_TITLE START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_ADM_REGION START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_TITLE_STATUS START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_TITLE_SUBJECT_ORG START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_ORGANIZATION_ROLE_TYPE START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_ORGANIZATION START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_COSTS_CLASSIFIER START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_TITLE_COSTS_CLASSIFIER START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_OKVED START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_TITLE_NAME START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_TITLE_ADDRESS START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_FINANCING_SOURCE START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_ECONOMICAL_CLASSIFIER START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_BUDGET_CLASSIFIER START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_STATE_PROGRAM START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_POWER START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_POWER_MEASUREMENT_UNIT START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_BUILD_TYPE START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_TITLE_ADM_REGION START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_TITLE_TERM START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_TITLE_TERM_TYPE START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_BUILD_INDICATOR START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_BUILD_INDICATOR_VALUE START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_BUILD_INDICATOR_CLASSIFIER START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_PROJECT_STAGE START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_BUILD_STATE START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_WORK_STAGE START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_PROJECT_SERIE START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_BUILD_TYPE_CLASSIFIER START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_BUILD_DIRECTION START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_FINANCING_METHOD START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_FLOOR_CLASSIFIER START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_BUILD_INDICATOR_TYPE START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_BUILD_INDICATOR_VALUE_TYPE START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_TITLE_BUILD_CHARACTERISTIC START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_TITLE_TYPE START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_BASE_YEAR_PRICES START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_BUILD_I_CLASSIFIER_ORG START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_CHARACTER_CONSTRUCTION START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_FACT_INDICATOR START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_FACT_INDICATOR_TYPE START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_FACT_INDICATOR_ITEM START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_FACT_INDICATOR_VALUE_TYPE START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_FACT_INDICATOR_CLASSIFIER START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_FACT_INDICATOR_VALUE START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_DOC_FILE START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_DOCUMENT START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_REGULATORY_DOC_TYPE START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_DOCUMENT_TYPE START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_DOCUMENT_STATUS START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_CONTRACT START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_CONTRACT_CONCLUSION START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_CONTRACT_STATUS START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_PURCHASE_STATUS START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_FINANCIAL_PLAN START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_TITLE_PIR START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_VPP START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_REPORT_NAME START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_ROLE_GROUP START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_SYSTEM_UNIT_TYPE START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_SYSTEM_UNIT START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_ACTION START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_NSI_DIRECTORY START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_LETTER START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_TITLE_LETTER START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_TITLE_DOCUMENT START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_TITLE_CONTRACT START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_LETTER_STATUS START WITH 500000 INCREMENT BY 1 NOCACHE NOCYCLE;
    </sql>
  </changeSet>
  
  <changeSet author="mikerud" id="28082014-3">
    <sql>
      ALTER TABLE DOCUMENT DROP CONSTRAINT D_T_FK;
    </sql>
  </changeSet>
  
  <changeSet author="mikerud" id="28082014-4">
    <sql>
      ALTER TABLE CONTRACT DROP CONSTRAINT CONTRACT_TITLE_FK;
    </sql>
  </changeSet>
  
  <changeSet author="mikerud" id="28082014-5">
    <sql>
      INSERT INTO LETTER_STATUS (ID,NAME,ENTITY_ID,CREATE_DATE,DELETE_DATE,CREATOR) VALUES(1,'Находится на рассмотрении',0,NULL,NULL,0);
	  INSERT INTO LETTER_STATUS (ID,NAME,ENTITY_ID,CREATE_DATE,DELETE_DATE,CREATOR) VALUES(2,'Утвержден',0,NULL,NULL,0);
	  INSERT INTO LETTER_STATUS (ID,NAME,ENTITY_ID,CREATE_DATE,DELETE_DATE,CREATOR) VALUES(3,'Требует доработки',0,NULL,NULL,0);
    </sql>
  </changeSet>
  
  <changeSet author="mikerud" id="29082014-1">
    <sql>
	  ALTER TABLE TITLE MODIFY KOSGU VARCHAR2(8);
    </sql>
  </changeSet>
  
  <changeSet author="mikerud" id="29082014-2">
    <sql>
      INSERT INTO TITLE_TYPE (ID,NAME,ENTITY_ID,CREATE_DATE,DELETE_DATE,CREATOR) VALUES(4,'Оборудование',0,NULL,NULL,0);
	  INSERT INTO TITLE_TYPE (ID,NAME,ENTITY_ID,CREATE_DATE,DELETE_DATE,CREATOR) VALUES(16,'Сводный титул ПИР',0,NULL,NULL,0);
	</sql>
  </changeSet>

  <changeSet author="mikerud" id="03092014-1">
    <sql>
	  ALTER SEQUENCE SEQ_ENTITY INCREMENT BY 600000;
    </sql>
  </changeSet>
  
  <changeSet author="mikerud" id="04092014-1">
    <sql>
      INSERT INTO REGULATORY_DOC_TYPE (ID,NAME,SHORT_NAME,ENTITY_ID,CREATE_DATE,DELETE_DATE,CREATOR) VALUES(18,'Предложение государственного заказчика',NULL,0,NULL,NULL,0);
	  INSERT INTO REGULATORY_DOC_TYPE (ID,NAME,SHORT_NAME,ENTITY_ID,CREATE_DATE,DELETE_DATE,CREATOR) VALUES(19,'Приказ Департамента финансов',NULL,0,NULL,NULL,0);
	  INSERT INTO REGULATORY_DOC_TYPE (ID,NAME,SHORT_NAME,ENTITY_ID,CREATE_DATE,DELETE_DATE,CREATOR) VALUES(20,'Распоряжение ДГПР',NULL,0,NULL,NULL,0);
	  INSERT INTO REGULATORY_DOC_TYPE (ID,NAME,SHORT_NAME,ENTITY_ID,CREATE_DATE,DELETE_DATE,CREATOR) VALUES(21,'Постановление РЭК Москвы',NULL,0,NULL,NULL,0);
	  INSERT INTO REGULATORY_DOC_TYPE (ID,NAME,SHORT_NAME,ENTITY_ID,CREATE_DATE,DELETE_DATE,CREATOR) VALUES(22,'Протокол Временной комиссии по фин.мониторингу',NULL,0,NULL,NULL,0);
	  INSERT INTO REGULATORY_DOC_TYPE (ID,NAME,SHORT_NAME,ENTITY_ID,CREATE_DATE,DELETE_DATE,CREATOR) VALUES(23,'Указ Президента РФ',NULL,0,NULL,NULL,0);
	  INSERT INTO REGULATORY_DOC_TYPE (ID,NAME,SHORT_NAME,ENTITY_ID,CREATE_DATE,DELETE_DATE,CREATOR) VALUES(24,'Решение ВРГ',NULL,0,NULL,NULL,0);
	  INSERT INTO REGULATORY_DOC_TYPE (ID,NAME,SHORT_NAME,ENTITY_ID,CREATE_DATE,DELETE_DATE,CREATOR) VALUES(25,'Распоряжение зам. Мэра - Проектная документация',NULL,0,NULL,NULL,0);
	  INSERT INTO REGULATORY_DOC_TYPE (ID,NAME,SHORT_NAME,ENTITY_ID,CREATE_DATE,DELETE_DATE,CREATOR) VALUES(26,'-',NULL,0,NULL,NULL,0);
    </sql>
  </changeSet>
  
  <changeSet author="mikerud" id="05092014-1">
    <sql>
      INSERT INTO DOCUMENT_STATUS (ID,NAME,DOCUMENT_TYPE_ID,ENTITY_ID,CREATE_DATE,DELETE_DATE,CREATOR) VALUES(15,'Статус не определен',5,0,NULL,NULL,0);
    </sql>
  </changeSet>
  
  <changeSet author="mikerud" id="08092014-1">
    <sql>
	  ALTER TABLE FINANCIAL_PLAN MODIFY KBK VARCHAR2(128);
    </sql>
  </changeSet>
  
  <changeSet author="mikerud" id="10092014-1">
    <sql>
      ALTER TABLE BUDGET_CLASSIFIER DROP CONSTRAINT STATE_PROGRAM_FK;
    </sql>
  </changeSet>
  
  <changeSet author="mikerud" id="10092014-2">
    <sql>
      ALTER TABLE POWER DROP CONSTRAINT POWER_MEASUREMENT_UNIT_FK;
	  DROP TABLE POWER_MEASUREMENT_UNIT;
	  DROP TABLE KBK;
    </sql>
  </changeSet>

  <changeSet author="mikerud" id="14092014-2">
    <sql>
      ALTER TABLE BUILD_INDICATOR_VALUE MODIFY YEAR NUMBER NULL;
    </sql>
  </changeSet>

  <changeSet author="mikerud" id="17092014-1">
    <sql>
      UPDATE LETTER_STATUS SET ENTITY_ID=ID, CREATE_DATE=CURRENT_TIMESTAMP, CREATOR=1;
	  UPDATE TITLE_TYPE SET ENTITY_ID=ID, CREATE_DATE=CURRENT_TIMESTAMP, CREATOR=1;
	  UPDATE REGULATORY_DOC_TYPE SET ENTITY_ID=ID, CREATE_DATE=CURRENT_TIMESTAMP, CREATOR=1;
	  UPDATE DOCUMENT_STATUS SET ENTITY_ID=ID, CREATE_DATE=CURRENT_TIMESTAMP, CREATOR=1;
    </sql>
  </changeSet>

  <changeSet author="Mayorov" id="24092014-1">
    <sql splitStatements="false">
      begin
      execute immediate 'create or replace trigger NEWID_ACTION  '||chr(10)||
      '   before insert on "ACTION" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_ACTION.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);

      execute immediate 'create or replace trigger NEWID_ADM_REGION  '||chr(10)||
      '   before insert on "ADM_REGION" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_ADM_REGION.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_BASE_YEAR_PRICES  '||chr(10)||
      '   before insert on "BASE_YEAR_PRICES" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_BASE_YEAR_PRICES.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_BUDGET_CLASSIFIER  '||chr(10)||
      '   before insert on "BUDGET_CLASSIFIER" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_BUDGET_CLASSIFIER.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_BUILD_DIRECTION  '||chr(10)||
      '   before insert on "BUILD_DIRECTION" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_BUILD_DIRECTION.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_BUILD_INDICATOR  '||chr(10)||
      '   before insert on "BUILD_INDICATOR" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_BUILD_INDICATOR.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger TID_BUILD_INDICATOR_CLASSIFIER  '||chr(10)||
      '   before insert on "BUILD_INDICATOR_CLASSIFIER" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_BUILD_INDICATOR_CLASSIFIER.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger TID_BICLASSIFIER_ORG  '||chr(10)||
      '   before insert on "BUILD_INDICATOR_CLASSIFIER_ORG" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_BUILD_I_CLASSIFIER_ORG.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_BUILD_INDICATOR_TYPE  '||chr(10)||
      '   before insert on "BUILD_INDICATOR_TYPE" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_BUILD_INDICATOR_TYPE.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_BUILD_INDICATOR_VALUE  '||chr(10)||
      '   before insert on "BUILD_INDICATOR_VALUE" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_BUILD_INDICATOR_VALUE.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_BUILD_I_VALUE_TYPE  '||chr(10)||
      '   before insert on "BUILD_INDICATOR_VALUE_TYPE" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_BUILD_INDICATOR_VALUE_TYPE.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_BUILD_STATE  '||chr(10)||
      '   before insert on "BUILD_STATE" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_BUILD_STATE.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_BUILD_TYPE  '||chr(10)||
      '   before insert on "BUILD_TYPE" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_BUILD_TYPE.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_BUILD_TYPE_CLASSIFIER  '||chr(10)||
      '   before insert on "BUILD_TYPE_CLASSIFIER" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_BUILD_TYPE_CLASSIFIER.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_CHARACTER_CONSTRUCTION  '||chr(10)||
      '   before insert on "CHARACTER_CONSTRUCTION" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_CHARACTER_CONSTRUCTION.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_CONTRACT  '||chr(10)||
      '   before insert on "CONTRACT" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_CONTRACT.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_CONTRACT_CONCLUSION  '||chr(10)||
      '   before insert on "CONTRACT_CONCLUSION" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_CONTRACT_CONCLUSION.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_CONTRACT_STATUS  '||chr(10)||
      '   before insert on "CONTRACT_STATUS" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_CONTRACT_STATUS.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_COSTS_CLASSIFIER  '||chr(10)||
      '   before insert on "COSTS_CLASSIFIER" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_COSTS_CLASSIFIER.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_DOC_FILE  '||chr(10)||
      '   before insert on "DOC_FILE" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_DOC_FILE.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_DOCUMENT  '||chr(10)||
      '   before insert on "DOCUMENT" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_DOCUMENT.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_DOCUMENT_STATUS  '||chr(10)||
      '   before insert on "DOCUMENT_STATUS" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_DOCUMENT_STATUS.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_DOCUMENT_TYPE  '||chr(10)||
      '   before insert on "DOCUMENT_TYPE" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_DOCUMENT_TYPE.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_ECONOMICAL_CLASSIFIER  '||chr(10)||
      '   before insert on "ECONOMICAL_CLASSIFIER" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_ECONOMICAL_CLASSIFIER.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_FACT_INDICATOR  '||chr(10)||
      '   before insert on "FACT_INDICATOR" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_FACT_INDICATOR.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_FACT_I_CLASSIFIER  '||chr(10)||
      '   before insert on "FACT_INDICATOR_CLASSIFIER" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_FACT_INDICATOR_CLASSIFIER.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_FACT_INDICATOR_ITEM  '||chr(10)||
      '   before insert on "FACT_INDICATOR_ITEM" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_FACT_INDICATOR_ITEM.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_FACT_INDICATOR_TYPE  '||chr(10)||
      '   before insert on "FACT_INDICATOR_TYPE" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_FACT_INDICATOR_TYPE.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_FACT_INDICATOR_VALUE  '||chr(10)||
      '   before insert on "FACT_INDICATOR_VALUE" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_FACT_INDICATOR_VALUE.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_FACT_I_VALUE_TYPE  '||chr(10)||
      '   before insert on "FACT_INDICATOR_VALUE_TYPE" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_FACT_INDICATOR_VALUE_TYPE.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_FINANCIAL_PLAN  '||chr(10)||
      '   before insert on "FINANCIAL_PLAN" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_FINANCIAL_PLAN.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_FINANCING_METHOD  '||chr(10)||
      '   before insert on "FINANCING_METHOD" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_FINANCING_METHOD.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_FINANCING_SOURCE  '||chr(10)||
      '   before insert on "FINANCING_SOURCE" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_FINANCING_SOURCE.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_FLOOR_CLASSIFIER  '||chr(10)||
      '   before insert on "FLOOR_CLASSIFIER" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_FLOOR_CLASSIFIER.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_GROUP  '||chr(10)||
      '   before insert on "GROUP" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_GROUP.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_NSI_DIRECTORY  '||chr(10)||
      '   before insert on "NSI_DIRECTORY" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_NSI_DIRECTORY.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_OKVED  '||chr(10)||
      '   before insert on "OKVED" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_OKVED.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_ORGANIZATION  '||chr(10)||
      '   before insert on "ORGANIZATION" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_ORGANIZATION.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_ORGANIZATION_ROLE_TYPE  '||chr(10)||
      '   before insert on "ORGANIZATION_ROLE_TYPE" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_ORGANIZATION_ROLE_TYPE.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_POWER  '||chr(10)||
      '   before insert on "POWER" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_POWER.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_PROJECT_SERIE  '||chr(10)||
      '   before insert on "PROJECT_SERIE" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_PROJECT_SERIE.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_PROJECT_STAGE  '||chr(10)||
      '   before insert on "PROJECT_STAGE" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_PROJECT_STAGE.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_PURCHASE_STATUS  '||chr(10)||
      '   before insert on "PURCHASE_STATUS" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_PURCHASE_STATUS.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_REGULATORY_DOC_TYPE  '||chr(10)||
      '   before insert on "REGULATORY_DOC_TYPE" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_REGULATORY_DOC_TYPE.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_REPORT_NAME  '||chr(10)||
      '   before insert on "REPORT_NAME" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_REPORT_NAME.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_ROLE  '||chr(10)||
      '   before insert on "ROLE" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_ROLE.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_ROLE_GROUP  '||chr(10)||
      '   before insert on "ROLE_GROUP" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_ROLE_GROUP.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_STATE_PROGRAM  '||chr(10)||
      '   before insert on "STATE_PROGRAM" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_STATE_PROGRAM.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_SYSTEM_UNIT  '||chr(10)||
      '   before insert on "SYSTEM_UNIT" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_SYSTEM_UNIT.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_SYSTEM_UNIT_TYPE  '||chr(10)||
      '   before insert on "SYSTEM_UNIT_TYPE" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_SYSTEM_UNIT_TYPE.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_TITLE  '||chr(10)||
      '   before insert on "TITLE" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_TITLE.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_TITLE_ADDRESS  '||chr(10)||
      '   before insert on "TITLE_ADDRESS" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_TITLE_ADDRESS.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_TITLE_ADM_REGION  '||chr(10)||
      '   before insert on "TITLE_ADM_REGION" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_TITLE_ADM_REGION.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_TITLE_B_CHARACTER  '||chr(10)||
      '   before insert on "TITLE_BUILD_CHARACTERISTIC" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_TITLE_BUILD_CHARACTERISTIC.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_TITLE_COSTS_CLASSIFIER  '||chr(10)||
      '   before insert on "TITLE_COSTS_CLASSIFIER" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_TITLE_COSTS_CLASSIFIER.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_TITLE_NAME  '||chr(10)||
      '   before insert on "TITLE_NAME" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_TITLE_NAME.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_TITLE_PIR  '||chr(10)||
      '   before insert on "TITLE_PIR" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_TITLE_PIR.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_TITLE_STATUS  '||chr(10)||
      '   before insert on "TITLE_STATUS" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_TITLE_STATUS.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_TITLE_SUBJECT_ORG  '||chr(10)||
      '   before insert on "TITLE_SUBJECT_ORG" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_TITLE_SUBJECT_ORG.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_TITLE_TERM  '||chr(10)||
      '   before insert on "TITLE_TERM" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_TITLE_TERM.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_TITLE_TERM_TYPE  '||chr(10)||
      '   before insert on "TITLE_TERM_TYPE" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_TITLE_TERM_TYPE.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_TITLE_TYPE  '||chr(10)||
      '   before insert on "TITLE_TYPE" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_TITLE_TYPE.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_USER  '||chr(10)||
      '   before insert on "USER" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_USER.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_USER_GROUP  '||chr(10)||
      '   before insert on "USER_GROUP" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_USER_GROUP.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_VPP  '||chr(10)||
      '   before insert on "VPP" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_VPP.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);


      execute immediate 'create or replace trigger NEWID_WORK_STAGE  '||chr(10)||
      '   before insert on "WORK_STAGE" '||chr(10)||
      '   for each row '||chr(10)||
      'begin  '||chr(10)||
      '   if inserting then '||chr(10)||
      '      if :NEW."ID" is null then '||chr(10)||
      '         select SEQ_WORK_STAGE.nextval into :NEW."ID" from dual; '||chr(10)||
      '      end if; '||chr(10)||
      '   end if; '||chr(10)||
      'end;'||chr(10);
      end;
    </sql>
  </changeSet>
</databaseChangeLog>